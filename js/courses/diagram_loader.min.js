document.addEventListener('DOMContentLoaded', function() {
const diagramImages = document.querySelectorAll('img[src$=".md"]');
diagramImages.forEach((img, index) => {
const diagramId = 'mermaid-diagram-' + index;
const container = document.createElement('div');
container.className = 'mermaid-container';
container.id = diagramId + '-container';
const mermaidDiv = document.createElement('div');
mermaidDiv.className = 'mermaid';
mermaidDiv.id = diagramId;
mermaidDiv.innerHTML = 'Loading diagram...';
container.appendChild(mermaidDiv);
img.parentNode.replaceChild(container, img);
const mdFilePath = img.getAttribute('src');
fetch(mdFilePath)
.then(response => {
if (!response.ok) {
throw new Error(`Failed to load diagram: ${response.status} ${response.statusText}`);
}
return response.text();
})
.then(content => {
const mermaidCode = extractMermaidCode(content);
if (mermaidCode) {
mermaidDiv.innerHTML = mermaidCode;
if (typeof mermaid !== 'undefined') {
try {
mermaid.init(undefined, mermaidDiv);
} catch (error) {
console.error('Error rendering mermaid diagram:', error);
mermaidDiv.innerHTML = 'Error rendering diagram: ' + error.message;
}
}
} else {
mermaidDiv.innerHTML = 'No valid mermaid diagram found in the source file.';
}
})
.catch(error => {
console.error('Error loading diagram:', error);
mermaidDiv.innerHTML = 'Error loading diagram: ' + error.message;
});
});
function extractMermaidCode(content) {
const mermaidRegex = /```mermaid\s*([\s\S]*?)\s*```/;
const match = content.match(mermaidRegex);
if (match && match[1]) {
return match[1].trim();
}
return null;
}
});
